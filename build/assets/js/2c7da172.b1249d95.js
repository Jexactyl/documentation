"use strict";(self.webpackChunkjexactyl_documentation=self.webpackChunkjexactyl_documentation||[]).push([[708],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7140:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],u={sidebar_position:5},i="Queue Workers",s={unversionedId:"panel/install/queue-workers",id:"panel/install/queue-workers",title:"Queue Workers",description:"*",source:"@site/docs/panel/install/queue-workers.md",sourceDirName:"panel/install",slug:"/panel/install/queue-workers",permalink:"/docs/panel/install/queue-workers",editUrl:"https://github.com/jexactyl/documentation/edit/main/docs/panel/install/queue-workers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Environment Setup",permalink:"/docs/panel/install/environment-setup"},next:{title:"SSL Setup",permalink:"/docs/panel/install/ws/ssl"}},c=[{value:"Crontab",id:"crontab",children:[],level:2},{value:"SystemD Queue Worker",id:"systemd-queue-worker",children:[],level:2},{value:"Enable Queue Worker",id:"enable-queue-worker",children:[],level:2}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"queue-workers"},"Queue Workers"),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"crontab"},"Crontab"),(0,o.kt)("p",null,"The first thing we need to do is create a new cronjob that runs every minute to process specific Jexactyl tasks, such as session cleanup and sending scheduled tasks to daemons. "),(0,o.kt)("p",null,"You'll want to open your crontab using ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo crontab -e")," and then paste the line below. ",(0,o.kt)("strong",{parentName:"p"},"Nano is the easiest text editor to use, so press ",(0,o.kt)("inlineCode",{parentName:"strong"},"1")," when prompted to pick an editor.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"* * * * * php /var/www/jexactyl/artisan schedule:run >> /dev/null 2>&1\n")),(0,o.kt)("h2",{id:"systemd-queue-worker"},"SystemD Queue Worker"),(0,o.kt)("p",null,"Next you need to create a new systemd worker to keep our queue process running in the background. This queue is responsible for sending emails and handling many other background tasks for Jexactyl."),(0,o.kt)("p",null,"Create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"panel.service")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system")," with the contents below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Jexactyl Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Jexactyl Queue Worker\n\n[Service]\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/jexactyl/artisan queue:work --queue=high,standard,low --sleep=3 --tries=3\nStartLimitInterval=180\nStartLimitBurst=30\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n")),(0,o.kt)("h2",{id:"enable-queue-worker"},"Enable Queue Worker"),(0,o.kt)("p",null,"Finally, enable the queue worker we just made to start and run on boot."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable --now panel.service\n")))}d.isMDXComponent=!0}}]);